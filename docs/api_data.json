[  {    "type": "",    "url": "delete(key,options)",    "title": "delete",    "name": "delete_config",    "version": "0.0.2",    "group": "Delete_Configuration",    "description": "<p>Delete one specific configuration by invoking core lambda function</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "key",            "description": "<p>The property of your configuration. You must specify a key(path) to delete one property. If you would like to delete the whole document, use DeleteDocument</p>"          },          {            "group": "Parameter",            "type": "Options",            "optional": true,            "field": "options",            "description": "<p>The options to this get configuration request</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.functionName",            "defaultValue": "lambda-configuration",            "description": "<p>The core configuration lambda function name</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.tableName",            "defaultValue": "lambda-configurations",            "description": "<p>The DynamoDB table name to store all configurations</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.documentName",            "defaultValue": "settings",            "description": "<p>The document name to delete the configuration</p>"          }        ]      },      "examples": [        {          "title": "delete-single-config(js/promise)",          "content": "config1.delete('version').then(() => {\n  console.log('done');\n});",          "type": "js"        },        {          "title": "delete-single-config(ts/async-await)",          "content": "await config1.delete('version');",          "type": "js"        }      ]    },    "filename": "src/index.ts",    "groupTitle": "Delete_Configuration"  },  {    "type": "",    "url": "deleteDocument(documentName,options)",    "title": "deleteDocument",    "name": "delete_whole_config",    "version": "0.0.2",    "group": "Delete_Configuration",    "description": "<p>Delete the whole configuration by invoking core lambda function</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "documentName",            "description": "<p>The name of your configuration. You must specify the documentName, default value is not applicable here. If you would like to delete only one property, use delete</p>"          },          {            "group": "Parameter",            "type": "Options",            "optional": true,            "field": "options",            "description": "<p>The options to this get configuration request</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.functionName",            "defaultValue": "lambda-configuration",            "description": "<p>The core configuration lambda function name</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.tableName",            "defaultValue": "lambda-configurations",            "description": "<p>The DynamoDB table name to store all configurations</p>"          }        ]      },      "examples": [        {          "title": "delete-whole-config(js/promise)",          "content": "config1.deleteDocument('version').then(() => {\n  console.log('done');\n});",          "type": "js"        },        {          "title": "delete-whole-config(ts/async-await)",          "content": "await config1.deleteDocument('version');",          "type": "js"        }      ]    },    "filename": "src/index.ts",    "groupTitle": "Delete_Configuration"  },  {    "type": "",    "url": "decryptKEK(data)",    "title": "decryptKEK",    "name": "decrypt_KEK_data",    "version": "1.1.0",    "group": "En_Decryption",    "description": "<p>Decrypt the data by Key-encryption-key (KEK). This function will decrypt your data by your data key which is encrypted by your AWS cmk.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Any",            "optional": false,            "field": "data",            "description": "<p>The data to be encrypted. The data can be in arbitrarily format, the library will do serialization for you.</p>"          }        ]      },      "examples": [        {          "title": "decryptKEK(js/promise)",          "content": "config1.get('password_group', { documentName: 'user001' })\n  .then(result => {\n    console.log(result);  // { cipher: Buffer<XX XX XX ...>, encryptedKey: Buffer<YY YY YY ...> }\n    return config1.decryptKEK(result);\n  })\n  .then(passwordGroup => console.log(passwordGroup));  // { password: '123456', second_password: 'qwerty' }",          "type": "json"        },        {          "title": "decryptKEK(ts/async-promise)",          "content": "const result = await config1.get<KEKCipher>('password_group', { documentName: 'user001' });\nconsole.log(result);  // { cipher: Buffer<XX XX XX ...>, encryptedKey: Buffer<YY YY YY ...> }\nconst passwordGroup = await config1.decryptKEK({ password: '123456', second_password: 'qwerty' });\nconsole.log(passwordGroup);  // { password: '123456', second_password: 'qwerty' }",          "type": "json"        }      ]    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Type",            "optional": false,            "field": ".",            "description": "<p>The data you encrypted, in exactly same format of what you pass into encryptKEK()</p>"          }        ]      }    },    "filename": "src/index.ts",    "groupTitle": "En_Decryption"  },  {    "type": "",    "url": "decrypt(data)",    "title": "decrypt",    "name": "decrypt_config",    "version": "1.1.0",    "group": "En_Decryption",    "description": "<p>Decrypt the data directly though AWS KMS</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Buffer",            "optional": false,            "field": "data",            "description": "<p>The encrypted cipher generated by encrypt()</p>"          }        ]      },      "examples": [        {          "title": "decrypt(js/promise)",          "content": "config1.get().then(myConfig => {\n  return config1.decrypt(myConfig.jwtToken);\n}).then(jwtToken => {\n  console.log(jwtToken);  // \"abcde12345\"\n});",          "type": "js"        },        {          "title": "decrypt(ts/async-await)",          "content": "const myConfig = await config1.get();\nconst jwtToken = config1.decrypt(myConfig.jwtToken);\nconsole.log(jwtToken);  // \"abcde12345\"",          "type": "js"        }      ]    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Type",            "optional": false,            "field": ".",            "description": "<p>The data you encrypted, in exactly same format of what you pass into encrypt()</p>"          }        ]      }    },    "filename": "src/index.ts",    "groupTitle": "En_Decryption"  },  {    "type": "",    "url": "encryptKEK(data,cmk)",    "title": "encryptKEK",    "name": "encrypt_KEK_data",    "version": "1.1.0",    "group": "En_Decryption",    "description": "<p>Encrypt the data by Key-encryption-key (KEK). This function will encrypt your data by a new random key which is encrypted by your AWS cmk. If the data itself is random, non-predictable, non-structural, non-repeat, you MAY use encrypt() for simplicity.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Any",            "optional": false,            "field": "data",            "description": "<p>The data to be encrypted. The data can be in arbitrarily format, the library will do serialization for you.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "cmk",            "defaultValue": "alias/lambda-configuration-key",            "description": "<p>The id/arn/alias of key in AWS KMS to encrypt to data. If a alias name is supplied, prepend a &quot;alias/&quot;, i.e. &quot;alias/my-key&quot;.</p>"          }        ]      },      "examples": [        {          "title": "encryptKEK(js/promise)",          "content": "config1.encryptKEK({ password: '123456', second_password: 'qwerty' })\n  .then(result => {\n    console.log(result);  // { cipher: Buffer<XX XX XX ...>, encryptedKey: Buffer<YY YY YY ...> }\n    return config1.set(result, 'password_group', { documentName: 'user001' });\n  })\n  .then(() => console.log('change password success'));",          "type": "js"        },        {          "title": "encryptKEK(ts/async-promise)",          "content": "const result = await config1.encryptKEK({ password: '123456', second_password: 'qwerty' });\nconsole.log(result);  // { cipher: Buffer<XX XX XX ...>, encryptedKey: Buffer<YY YY YY ...> }\nawait config1.set(result, 'password_group', { documentName: 'user001' });\nconsole.log('change password success');",          "type": "js"        }      ]    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Buffer",            "optional": false,            "field": "cipher",            "description": "<p>A buffer contains the encrypted data</p>"          },          {            "group": "Success 200",            "type": "Buffer",            "optional": false,            "field": "encryptedKey",            "description": "<p>A buffer contains the data key used to encrypt the data. This key is encrypted by your AWS cmk.</p>"          }        ]      },      "examples": [        {          "title": "{",          "content": "{\n  \"cipher\": Buffer<XX XX XX ...>,\n  \"encryptedKey\": Buffer<YY YY YY ...>\n}",          "type": "json"        }      ]    },    "filename": "src/index.ts",    "groupTitle": "En_Decryption"  },  {    "type": "",    "url": "encrypt(data,cmk)",    "title": "encrypt",    "name": "encrypt_config",    "version": "1.1.0",    "group": "En_Decryption",    "description": "<p>Encrypt the data directly though AWS KMS. This function should only be used to encrypt data itself is random, e.g. access token, access secret, etc. If you want to encrypt more predict able data, e.g. user password. Use encryptKEK instead.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Any",            "optional": false,            "field": "data",            "description": "<p>The data to be encrypted. The data can be in arbitrarily format, the library will do serialization for you.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "cmk",            "defaultValue": "alias/lambda-configuration-key",            "description": "<p>The id/arn/alias of key in AWS KMS to encrypt to data. If a alias name is supplied, prepend a &quot;alias/&quot;, i.e. &quot;alias/my-key&quot;.</p>"          }        ]      },      "examples": [        {          "title": "encrypt-data(js/promise)",          "content": "config1.encrypt({ jwtToken: 'abcde12345' }).then((cipher) => {\n  console.log(cipher);  // Buffer<00 02 ff ....>\n});",          "type": "js"        },        {          "title": "encrypt-data(ts/async-await)",          "content": "const cipher = await config1.encrypt({ jwtToken: 'abcde12345' });\nconsole.log(cipher);  // Buffer<00 02 ff ....>",          "type": "js"        }      ]    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Buffer",            "optional": false,            "field": ".",            "description": "<p>A buffer contains the encrypted data.</p>"          }        ]      },      "examples": [        {          "title": "Buffer <00 01 02 03 04 05 06 ...>",          "content": "Buffer <00 01 02 03 04 05 06 ...>",          "type": "Buffer"        }      ]    },    "filename": "src/index.ts",    "groupTitle": "En_Decryption"  },  {    "type": "",    "url": "get<T>(key,options)",    "title": "get",    "name": "get_config",    "version": "0.0.1",    "group": "Get_Configuration",    "description": "<p>Get the configuration by invoking core lambda function</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Type",            "optional": false,            "field": "T",            "description": "<p>The type of configuration you are getting, available in typescript</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "key",            "description": "<p>The sub-path to your configuration. Leave undefined will get the whole configuration object</p>"          },          {            "group": "Parameter",            "type": "Options",            "optional": true,            "field": "options",            "description": "<p>The options to this get configuration request</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.functionName",            "defaultValue": "lambda-configuration",            "description": "<p>The core configuration lambda function name</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.tableName",            "defaultValue": "lambda-configurations",            "description": "<p>The DynamoDB table name to store all configurations</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.documentName",            "defaultValue": "settings",            "description": "<p>The document name to get the configurations</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "options.noCache",            "description": "<p>Does the core return/save cached for the configuration</p>"          }        ]      },      "examples": [        {          "title": "get-single-config(js/promise)",          "content": "config1.get('version').then((serverVerison) => {\n  console.log(serverVerison);\n});",          "type": "js"        },        {          "title": "get-whole-config(ts/async-await)",          "content": "type ConfigModel = {\n  version: string;\n  ...\n  ...\n  ...\n}\nconst myConfig = await config1.get<ConfigModel>();\nconsole.log(myConfig.version);",          "type": "js"        }      ]    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Type",            "optional": false,            "field": ".",            "description": "<p>The config you stored.</p>"          }        ]      },      "examples": [        {          "title": "with-key",          "content": "\"user001\"",          "type": "String"        },        {          "title": "without-key",          "content": "{\n  \"userId\": \"user001\",\n  \"password_group\": {\n    \"cipher\": Buffer<XX XX XX ...>,\n    \"encryptedKey\": Buffer<YY YY YY ...>\n  },\n  \"something\": [\"else\", true, 1234]\n}",          "type": "json"        }      ]    },    "filename": "src/index.ts",    "groupTitle": "Get_Configuration"  },  {    "type": "",    "url": "getFresh<T>(key,options)",    "title": "getFresh",    "name": "get_fresh_config",    "version": "0.0.1",    "group": "Get_Configuration",    "description": "<p>Same as get-config but just help you set the noCache to true. Get the fresh, non-cached configuration by invoking core lambda function</p>",    "parameter": {      "examples": [        {          "title": "get-single-config(js/promise)",          "content": "config1.getFresh('version').then(serverVerison => {\n  console.log(serverVerison);\n});",          "type": "js"        },        {          "title": "get-whole-config(ts/async-await)",          "content": "type ConfigModel = {\n  version: string;\n  ...\n  ...\n  ...\n}\nconst myConfig = await config1.getFresh<ConfigModel>();\nconsole.log(myConfig.version);",          "type": "js"        }      ]    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Type",            "optional": false,            "field": ".",            "description": "<p>The config you stored.</p>"          }        ]      },      "examples": [        {          "title": "with-key",          "content": "\"user001\"",          "type": "String"        },        {          "title": "without-key",          "content": "{\n  \"userId\": \"user001\",\n  \"password_group\": {\n    \"cipher\": Buffer<XX XX XX ...>,\n    \"encryptedKey\": Buffer<YY YY YY ...>\n  },\n  \"something\": [\"else\", true, 1234]\n}",          "type": "json"        }      ]    },    "filename": "src/index.ts",    "groupTitle": "Get_Configuration"  },  {    "type": "",    "url": "has(key,options)",    "title": "has",    "name": "has_config",    "version": "0.0.1",    "group": "Get_Configuration",    "description": "<p>Check if the configuration exists by invoking core lambda function. It is useful to save data transmission between lambdas when you only want to check if it contains a property.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "key",            "description": "<p>The sub-path to your configuration. Leave undefined will check if the document exist</p>"          },          {            "group": "Parameter",            "type": "Options",            "optional": true,            "field": "options",            "description": "<p>The options to this check configuration request</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.functionName",            "defaultValue": "lambda-configuration",            "description": "<p>The core configuration lambda function name</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.tableName",            "defaultValue": "lambda-configurations",            "description": "<p>The DynamoDB table name to store all configurations</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.documentName",            "defaultValue": "settings",            "description": "<p>The document name to check the configurations</p>"          }        ]      },      "examples": [        {          "title": "has-single-config(js/promise)",          "content": "config1.has('version').then((isExist) => {\n  console.log(isExist);  // true\n});",          "type": "String"        },        {          "title": "has-whole-document(ts/async-await)",          "content": "const isExist = await config1.has(undefined, { documentName: 'tempDocument' });\nconsole.log(isExist); // true",          "type": "json"        }      ]    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "boolean",            "optional": false,            "field": ".",            "description": "<p>Does the configuration contains the document / the document contains the path</p>"          }        ]      }    },    "filename": "src/index.ts",    "groupTitle": "Get_Configuration"  },  {    "type": "",    "url": "constructor(options)",    "title": "constructor",    "name": "constrcutor",    "version": "0.0.2",    "group": "Initialization",    "description": "<p>Initialization</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Options",            "optional": true,            "field": "options",            "description": "<p>The options to this get configuration request</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.functionName",            "defaultValue": "lambda-configuration",            "description": "<p>The core configuration lambda function name</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.tableName",            "defaultValue": "lambda-configurations",            "description": "<p>The DynamoDB table name to store all configurations</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.documentName",            "defaultValue": "settings",            "description": "<p>The document name to access the configurations</p>"          }        ]      },      "examples": [        {          "title": "construction(js)",          "content": "const Config = require('aws-lambda-configuration-js').default;\nconst config1 = new Config();",          "type": "js"        },        {          "title": "construction(ts)",          "content": "import Config from 'aws-lambda-configuration-js';\nconst config1 = new Config();",          "type": "js"        },        {          "title": "with-options",          "content": "import Config from 'aws-lambda-configuration-js';\nconst config1 = new Config({\n  functionName: 'my-lambda',\n  tableName: 'my-table',\n  documentName: 'my-configuration'\n})",          "type": "js"        }      ]    },    "filename": "src/index.ts",    "groupTitle": "Initialization"  },  {    "type": "",    "url": "set(data,key,options)",    "title": "set",    "name": "set_config",    "version": "0.0.1",    "group": "Set_Configuration",    "description": "<p>Set the configuration/Create a new Document by invoking core lambda function</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "any",            "optional": false,            "field": "data",            "description": "<p>The configuration to store. If key is undefined, this should be an object (unless you really want to store one config per one document). This could happen if you decided to encrypt the whole config document.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "key",            "description": "<p>The sub-path to your configuration. Leave undefined will create/replace the whole configuration document</p>"          },          {            "group": "Parameter",            "type": "Options",            "optional": true,            "field": "options",            "description": "<p>The options to this set configuration request</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.functionName",            "defaultValue": "lambda-configuration",            "description": "<p>The core configuration lambda function name</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.tableName",            "defaultValue": "lambda-configurations",            "description": "<p>The DynamoDB table name to store all configurations</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.documentName",            "defaultValue": "settings",            "description": "<p>The document name to set the configurations</p>"          }        ]      },      "examples": [        {          "title": "set-single-config(js/promise)",          "content": "const data = 'HI, This is my secret';\nconfig1.set(data, 'additionField').then(() => {\n  console.log('done');\n});",          "type": "js"        },        {          "title": "create-new-config(ts/async-await)",          "content": "type ConfigModel = {\n  a: string;\n  c: number;\n  d: boolean;\n  ...\n}\nconst data: ConfigModel = { a: 'b', c: 1, d: true, f: ['i', 'jk'] };\nawait config1.set(data, undefined, { documentName: 'my2ndConfiguration' });",          "type": "js"        }      ]    },    "filename": "src/index.ts",    "groupTitle": "Set_Configuration"  }]
