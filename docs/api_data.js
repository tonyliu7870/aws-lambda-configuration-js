define({ "api": [  {    "type": "",    "url": "delete(key,options)",    "title": "delete",    "name": "delete_config",    "version": "0.0.2",    "group": "Delete_Configuration",    "description": "<p>Delete one specific configuration by invoking core lambda function</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "key",            "description": "<p>The property of your configuration. You must specify a key(path) to delete one property. If you would like to delete the whole document, use DeleteDocument</p>"          },          {            "group": "Parameter",            "type": "Options",            "optional": true,            "field": "options",            "description": "<p>The options to this get configuration request</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.functionName",            "defaultValue": "lambda-configuration",            "description": "<p>The core configuration lambda function name</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.tableName",            "defaultValue": "lambda-configurations",            "description": "<p>The DynamoDB table name to store all configurations</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.documentName",            "defaultValue": "settings",            "description": "<p>The document name to delete the configuration</p>"          }        ]      },      "examples": [        {          "title": "delete-single-config(js/promise)",          "content": "config1.delete('version').then(() => {\n  console.log('done');\n});",          "type": "String"        },        {          "title": "delete-single-config(ts/async-await)",          "content": "await config1.delete('version');",          "type": "json"        }      ]    },    "filename": "src/index.ts",    "groupTitle": "Delete_Configuration"  },  {    "type": "",    "url": "deleteDocument(documentName,options)",    "title": "deleteDocument",    "name": "delete_whole_config",    "version": "0.0.2",    "group": "Delete_Configuration",    "description": "<p>Delete the whole configuration by invoking core lambda function</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "documentName",            "description": "<p>The name of your configuration. You must specify the documentName, default value is not applicable here. If you would like to delete only one property, use delete</p>"          },          {            "group": "Parameter",            "type": "Options",            "optional": true,            "field": "options",            "description": "<p>The options to this get configuration request</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.functionName",            "defaultValue": "lambda-configuration",            "description": "<p>The core configuration lambda function name</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.tableName",            "defaultValue": "lambda-configurations",            "description": "<p>The DynamoDB table name to store all configurations</p>"          }        ]      },      "examples": [        {          "title": "delete-whole-config(js/promise)",          "content": "config1.deleteDocument('version').then(() => {\n  console.log('done');\n});",          "type": "String"        },        {          "title": "delete-whole-config(ts/async-await)",          "content": "await config1.deleteDocument('version');",          "type": "json"        }      ]    },    "filename": "src/index.ts",    "groupTitle": "Delete_Configuration"  },  {    "type": "",    "url": "get<T>(key,options)",    "title": "get",    "name": "get_config",    "version": "0.0.1",    "group": "Get_Configuration",    "description": "<p>Get the configuration by invoking core lambda function</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Type",            "optional": false,            "field": "T",            "description": "<p>The type of configuration you are getting, available in typescript</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "key",            "description": "<p>The sub-path to your configuration. Leave undefined will get the whole configuration object</p>"          },          {            "group": "Parameter",            "type": "Options",            "optional": true,            "field": "options",            "description": "<p>The options to this get configuration request</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.functionName",            "defaultValue": "lambda-configuration",            "description": "<p>The core configuration lambda function name</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.tableName",            "defaultValue": "lambda-configurations",            "description": "<p>The DynamoDB table name to store all configurations</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.documentName",            "defaultValue": "settings",            "description": "<p>The document name to get the configurations</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "options.noCache",            "description": "<p>Does the core return/save cached for the configuration</p>"          }        ]      },      "examples": [        {          "title": "get-single-config(js/promise)",          "content": "const Config = require('aws-lambda-configuration-js');\nconst config1 = new Config();\n\nconfig1.get('version').then((serverVerison) => {\n  console.log(serverVerison);\n});",          "type": "String"        },        {          "title": "get-whole-config(ts/async-await)",          "content": "import Config from 'aws-lambda-configuration-js';\nconst config1 = new Config();\n\ntype ConfigModel = {\n  version: string;\n  ...\n  ...\n  ...\n}\nconst myConfig = await config1.get<ConfigModel>();\nconsole.log(myConfig.version);",          "type": "json"        }      ]    },    "filename": "src/index.ts",    "groupTitle": "Get_Configuration"  },  {    "type": "",    "url": "getFresh<T>(key,options)",    "title": "getFresh",    "name": "get_fresh_config",    "version": "0.0.1",    "group": "Get_Configuration",    "description": "<p>Same as get-config but just help you set the noCache to true. Get the fresh, non-cached configuration by invoking core lambda function</p>",    "parameter": {      "examples": [        {          "title": "get-single-config(js/promise)",          "content": "const Config = require('aws-lambda-configuration-js');\nconst config1 = new Config();\n\nconfig1.getFresh('version').then(serverVerison => {\n  console.log(serverVerison);\n});",          "type": "String"        },        {          "title": "get-whole-config(ts/async-await)",          "content": "import Config from 'aws-lambda-configuration-js';\nconst config1 = new Config();\n\ntype ConfigModel = {\n  version: string;\n  ...\n  ...\n  ...\n}\nconst myConfig = await config1.getFresh<ConfigModel>();\nconsole.log(myConfig.version);",          "type": "json"        }      ]    },    "filename": "src/index.ts",    "groupTitle": "Get_Configuration"  },  {    "type": "",    "url": "has(key,options)",    "title": "has",    "name": "has_config",    "version": "0.0.1",    "group": "Get_Configuration",    "description": "<p>Check if the configuration exists by invoking core lambda function. It is useful to save data transmission between lambdas when you only want to check if it contains a property.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "key",            "description": "<p>The sub-path to your configuration. Leave undefined will check if the document exist</p>"          },          {            "group": "Parameter",            "type": "Options",            "optional": true,            "field": "options",            "description": "<p>The options to this check configuration request</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.functionName",            "defaultValue": "lambda-configuration",            "description": "<p>The core configuration lambda function name</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.tableName",            "defaultValue": "lambda-configurations",            "description": "<p>The DynamoDB table name to store all configurations</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.documentName",            "defaultValue": "settings",            "description": "<p>The document name to check the configurations</p>"          }        ]      },      "examples": [        {          "title": "has-single-config(js/promise)",          "content": "config1.has('version').then((isExist) => {\n  console.log(isExist);  //true\n});",          "type": "String"        },        {          "title": "has-whole-document(ts/async-await)",          "content": "const isExist = await config1.has(undefined, { documentName: 'tempDocument' });\nconsole.log(isExist); //true",          "type": "json"        }      ]    },    "filename": "src/index.ts",    "groupTitle": "Get_Configuration"  },  {    "type": "",    "url": "set(data,key,options)",    "title": "set",    "name": "set_config",    "version": "0.0.1",    "group": "Set_Configuration",    "description": "<p>Set the configuration/Create a new Document by invoking core lambda function</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "any",            "optional": false,            "field": "data",            "description": "<p>The configuration to store. If key is undefined, this should be an object (unless you really want to store one config per one document). This could happen if you decided to encrypt the whole config document.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "key",            "description": "<p>The sub-path to your configuration. Leave undefined will create/replace the whole configuration document</p>"          },          {            "group": "Parameter",            "type": "Options",            "optional": true,            "field": "options",            "description": "<p>The options to this set configuration request</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.functionName",            "defaultValue": "lambda-configuration",            "description": "<p>The core configuration lambda function name</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.tableName",            "defaultValue": "lambda-configurations",            "description": "<p>The DynamoDB table name to store all configurations</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "options.documentName",            "defaultValue": "settings",            "description": "<p>The document name to set the configurations</p>"          }        ]      },      "examples": [        {          "title": "set-single-config(js/promise)",          "content": "const data = 'HI, This is my secret';\nconfig1.set(data, 'additionField').then(() => {\n  console.log('done');\n});",          "type": "String"        },        {          "title": "create-new-config(ts/async-await)",          "content": "type ConfigModel = {\n  a: string;\n  c: number;\n  d: boolean;\n  ...\n}\nconst data: ConfigModel = { a: 'b', c: 1, d: true, f: ['i', 'jk'] };\nawait config1.set(data, , { documentName: 'my2ndConfiguration' });",          "type": "json"        }      ]    },    "filename": "src/index.ts",    "groupTitle": "Set_Configuration"  }] });
